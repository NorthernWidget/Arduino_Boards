
optiboot_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00001e00  00001e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  00000240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00800060  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000d08  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f43  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e8f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <main>
    1e02:	d4 c0       	rjmp	.+424    	; 0x1fac <do_spm>

00001e04 <main>:
    1e04:	11 24       	eor	r1, r1
    1e06:	8f e5       	ldi	r24, 0x5F	; 95
    1e08:	94 e0       	ldi	r25, 0x04	; 4
    1e0a:	9e bf       	out	0x3e, r25	; 62
    1e0c:	8d bf       	out	0x3d, r24	; 61
    1e0e:	84 b7       	in	r24, 0x34	; 52
    1e10:	88 23       	and	r24, r24
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <main+0x28>
    1e14:	98 2f       	mov	r25, r24
    1e16:	9a 70       	andi	r25, 0x0A	; 10
    1e18:	92 30       	cpi	r25, 0x02	; 2
    1e1a:	41 f0       	breq	.+16     	; 0x1e2c <main+0x28>
    1e1c:	81 ff       	sbrs	r24, 1
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <main+0x20>
    1e20:	97 ef       	ldi	r25, 0xF7	; 247
    1e22:	94 bf       	out	0x34, r25	; 52
    1e24:	28 2e       	mov	r2, r24
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	ae d0       	rcall	.+348    	; 0x1f86 <watchdogConfig>
    1e2a:	ea c0       	rjmp	.+468    	; 0x2000 <__TEXT_REGION_LENGTH__>
    1e2c:	85 e0       	ldi	r24, 0x05	; 5
    1e2e:	8e bd       	out	0x2e, r24	; 46
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	8b b9       	out	0x0b, r24	; 11
    1e34:	88 e1       	ldi	r24, 0x18	; 24
    1e36:	8a b9       	out	0x0a, r24	; 10
    1e38:	86 e8       	ldi	r24, 0x86	; 134
    1e3a:	80 bd       	out	0x20, r24	; 32
    1e3c:	80 e1       	ldi	r24, 0x10	; 16
    1e3e:	89 b9       	out	0x09, r24	; 9
    1e40:	8e e0       	ldi	r24, 0x0E	; 14
    1e42:	a1 d0       	rcall	.+322    	; 0x1f86 <watchdogConfig>
    1e44:	bd 9a       	sbi	0x17, 5	; 23
    1e46:	86 e0       	ldi	r24, 0x06	; 6
    1e48:	20 e3       	ldi	r18, 0x30	; 48
    1e4a:	3c ef       	ldi	r19, 0xFC	; 252
    1e4c:	44 e0       	ldi	r20, 0x04	; 4
    1e4e:	50 e2       	ldi	r21, 0x20	; 32
    1e50:	3d bd       	out	0x2d, r19	; 45
    1e52:	2c bd       	out	0x2c, r18	; 44
    1e54:	48 bf       	out	0x38, r20	; 56
    1e56:	08 b6       	in	r0, 0x38	; 56
    1e58:	02 fe       	sbrs	r0, 2
    1e5a:	fd cf       	rjmp	.-6      	; 0x1e56 <main+0x52>
    1e5c:	98 b3       	in	r25, 0x18	; 24
    1e5e:	95 27       	eor	r25, r21
    1e60:	98 bb       	out	0x18, r25	; 24
    1e62:	a8 95       	wdr
    1e64:	5f 99       	sbic	0x0b, 7	; 11
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <main+0x68>
    1e68:	81 50       	subi	r24, 0x01	; 1
    1e6a:	91 f7       	brne	.-28     	; 0x1e50 <main+0x4c>
    1e6c:	ee 24       	eor	r14, r14
    1e6e:	e3 94       	inc	r14
    1e70:	25 e0       	ldi	r18, 0x05	; 5
    1e72:	d2 2e       	mov	r13, r18
    1e74:	31 e1       	ldi	r19, 0x11	; 17
    1e76:	c3 2e       	mov	r12, r19
    1e78:	7f d0       	rcall	.+254    	; 0x1f78 <getch>
    1e7a:	81 34       	cpi	r24, 0x41	; 65
    1e7c:	61 f4       	brne	.+24     	; 0x1e96 <main+0x92>
    1e7e:	7c d0       	rcall	.+248    	; 0x1f78 <getch>
    1e80:	18 2f       	mov	r17, r24
    1e82:	85 d0       	rcall	.+266    	; 0x1f8e <verifySpace>
    1e84:	12 38       	cpi	r17, 0x82	; 130
    1e86:	e9 f0       	breq	.+58     	; 0x1ec2 <main+0xbe>
    1e88:	11 38       	cpi	r17, 0x81	; 129
    1e8a:	11 f4       	brne	.+4      	; 0x1e90 <main+0x8c>
    1e8c:	88 e0       	ldi	r24, 0x08	; 8
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <main+0x8e>
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	6e d0       	rcall	.+220    	; 0x1f70 <putch>
    1e94:	6a c0       	rjmp	.+212    	; 0x1f6a <main+0x166>
    1e96:	82 34       	cpi	r24, 0x42	; 66
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <main+0x9a>
    1e9a:	84 e1       	ldi	r24, 0x14	; 20
    1e9c:	03 c0       	rjmp	.+6      	; 0x1ea4 <main+0xa0>
    1e9e:	85 34       	cpi	r24, 0x45	; 69
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <main+0xa4>
    1ea2:	85 e0       	ldi	r24, 0x05	; 5
    1ea4:	7c d0       	rcall	.+248    	; 0x1f9e <getNch>
    1ea6:	61 c0       	rjmp	.+194    	; 0x1f6a <main+0x166>
    1ea8:	85 35       	cpi	r24, 0x55	; 85
    1eaa:	39 f4       	brne	.+14     	; 0x1eba <main+0xb6>
    1eac:	65 d0       	rcall	.+202    	; 0x1f78 <getch>
    1eae:	c8 2f       	mov	r28, r24
    1eb0:	63 d0       	rcall	.+198    	; 0x1f78 <getch>
    1eb2:	d8 2f       	mov	r29, r24
    1eb4:	cc 0f       	add	r28, r28
    1eb6:	dd 1f       	adc	r29, r29
    1eb8:	57 c0       	rjmp	.+174    	; 0x1f68 <main+0x164>
    1eba:	86 35       	cpi	r24, 0x56	; 86
    1ebc:	21 f4       	brne	.+8      	; 0x1ec6 <main+0xc2>
    1ebe:	84 e0       	ldi	r24, 0x04	; 4
    1ec0:	6e d0       	rcall	.+220    	; 0x1f9e <getNch>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	e6 cf       	rjmp	.-52     	; 0x1e92 <main+0x8e>
    1ec6:	84 36       	cpi	r24, 0x64	; 100
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <main+0xc8>
    1eca:	31 c0       	rjmp	.+98     	; 0x1f2e <main+0x12a>
    1ecc:	55 d0       	rcall	.+170    	; 0x1f78 <getch>
    1ece:	54 d0       	rcall	.+168    	; 0x1f78 <getch>
    1ed0:	18 2f       	mov	r17, r24
    1ed2:	52 d0       	rcall	.+164    	; 0x1f78 <getch>
    1ed4:	f8 2e       	mov	r15, r24
    1ed6:	01 2f       	mov	r16, r17
    1ed8:	80 e6       	ldi	r24, 0x60	; 96
    1eda:	a8 2e       	mov	r10, r24
    1edc:	b1 2c       	mov	r11, r1
    1ede:	4c d0       	rcall	.+152    	; 0x1f78 <getch>
    1ee0:	f5 01       	movw	r30, r10
    1ee2:	81 93       	st	Z+, r24
    1ee4:	5f 01       	movw	r10, r30
    1ee6:	01 50       	subi	r16, 0x01	; 1
    1ee8:	d1 f7       	brne	.-12     	; 0x1ede <main+0xda>
    1eea:	51 d0       	rcall	.+162    	; 0x1f8e <verifySpace>
    1eec:	f5 e4       	ldi	r31, 0x45	; 69
    1eee:	ff 12       	cpse	r15, r31
    1ef0:	01 c0       	rjmp	.+2      	; 0x1ef4 <main+0xf0>
    1ef2:	ff cf       	rjmp	.-2      	; 0x1ef2 <main+0xee>
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	87 bf       	out	0x37, r24	; 55
    1efa:	e8 95       	spm
    1efc:	07 b6       	in	r0, 0x37	; 55
    1efe:	00 fc       	sbrc	r0, 0
    1f00:	fd cf       	rjmp	.-6      	; 0x1efc <main+0xf8>
    1f02:	a0 e6       	ldi	r26, 0x60	; 96
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	fe 01       	movw	r30, r28
    1f08:	8d 91       	ld	r24, X+
    1f0a:	9d 91       	ld	r25, X+
    1f0c:	0c 01       	movw	r0, r24
    1f0e:	e7 be       	out	0x37, r14	; 55
    1f10:	e8 95       	spm
    1f12:	11 24       	eor	r1, r1
    1f14:	12 50       	subi	r17, 0x02	; 2
    1f16:	32 96       	adiw	r30, 0x02	; 2
    1f18:	11 11       	cpse	r17, r1
    1f1a:	f6 cf       	rjmp	.-20     	; 0x1f08 <main+0x104>
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	d7 be       	out	0x37, r13	; 55
    1f20:	e8 95       	spm
    1f22:	07 b6       	in	r0, 0x37	; 55
    1f24:	00 fc       	sbrc	r0, 0
    1f26:	fd cf       	rjmp	.-6      	; 0x1f22 <main+0x11e>
    1f28:	c7 be       	out	0x37, r12	; 55
    1f2a:	e8 95       	spm
    1f2c:	1e c0       	rjmp	.+60     	; 0x1f6a <main+0x166>
    1f2e:	84 37       	cpi	r24, 0x74	; 116
    1f30:	71 f4       	brne	.+28     	; 0x1f4e <main+0x14a>
    1f32:	22 d0       	rcall	.+68     	; 0x1f78 <getch>
    1f34:	21 d0       	rcall	.+66     	; 0x1f78 <getch>
    1f36:	f8 2e       	mov	r15, r24
    1f38:	1f d0       	rcall	.+62     	; 0x1f78 <getch>
    1f3a:	29 d0       	rcall	.+82     	; 0x1f8e <verifySpace>
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	f8 01       	movw	r30, r16
    1f40:	85 91       	lpm	r24, Z+
    1f42:	8f 01       	movw	r16, r30
    1f44:	15 d0       	rcall	.+42     	; 0x1f70 <putch>
    1f46:	fa 94       	dec	r15
    1f48:	f1 10       	cpse	r15, r1
    1f4a:	f9 cf       	rjmp	.-14     	; 0x1f3e <main+0x13a>
    1f4c:	0e c0       	rjmp	.+28     	; 0x1f6a <main+0x166>
    1f4e:	85 37       	cpi	r24, 0x75	; 117
    1f50:	39 f4       	brne	.+14     	; 0x1f60 <main+0x15c>
    1f52:	1d d0       	rcall	.+58     	; 0x1f8e <verifySpace>
    1f54:	8e e1       	ldi	r24, 0x1E	; 30
    1f56:	0c d0       	rcall	.+24     	; 0x1f70 <putch>
    1f58:	83 e9       	ldi	r24, 0x93	; 147
    1f5a:	0a d0       	rcall	.+20     	; 0x1f70 <putch>
    1f5c:	87 e0       	ldi	r24, 0x07	; 7
    1f5e:	99 cf       	rjmp	.-206    	; 0x1e92 <main+0x8e>
    1f60:	81 35       	cpi	r24, 0x51	; 81
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <main+0x164>
    1f64:	88 e0       	ldi	r24, 0x08	; 8
    1f66:	0f d0       	rcall	.+30     	; 0x1f86 <watchdogConfig>
    1f68:	12 d0       	rcall	.+36     	; 0x1f8e <verifySpace>
    1f6a:	80 e1       	ldi	r24, 0x10	; 16
    1f6c:	01 d0       	rcall	.+2      	; 0x1f70 <putch>
    1f6e:	84 cf       	rjmp	.-248    	; 0x1e78 <main+0x74>

00001f70 <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  #ifndef LIN_UART
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    1f70:	5d 9b       	sbis	0x0b, 5	; 11
    1f72:	fe cf       	rjmp	.-4      	; 0x1f70 <putch>
  #else
    while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
  #endif

  UART_UDR = ch;
    1f74:	8c b9       	out	0x0c, r24	; 12
    1f76:	08 95       	ret

00001f78 <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    1f78:	5f 9b       	sbis	0x0b, 7	; 11
    1f7a:	fe cf       	rjmp	.-4      	; 0x1f78 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f7c:	5c 99       	sbic	0x0b, 4	; 11
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f80:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    1f82:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1f84:	08 95       	ret

00001f86 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f86:	98 e1       	ldi	r25, 0x18	; 24
    1f88:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif 

#ifdef WDTCSR
  WDTCSR = x;
    1f8a:	81 bd       	out	0x21, r24	; 33
    1f8c:	08 95       	ret

00001f8e <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f8e:	f4 df       	rcall	.-24     	; 0x1f78 <getch>
    1f90:	80 32       	cpi	r24, 0x20	; 32
    1f92:	19 f0       	breq	.+6      	; 0x1f9a <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f94:	88 e0       	ldi	r24, 0x08	; 8
    1f96:	f7 df       	rcall	.-18     	; 0x1f86 <watchdogConfig>
    1f98:	ff cf       	rjmp	.-2      	; 0x1f98 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f9a:	84 e1       	ldi	r24, 0x14	; 20
    1f9c:	e9 cf       	rjmp	.-46     	; 0x1f70 <putch>

00001f9e <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1f9e:	cf 93       	push	r28
    1fa0:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fa2:	ea df       	rcall	.-44     	; 0x1f78 <getch>
    1fa4:	c1 50       	subi	r28, 0x01	; 1
    1fa6:	e9 f7       	brne	.-6      	; 0x1fa2 <getNch+0x4>
  verifySpace();
}
    1fa8:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1faa:	f1 cf       	rjmp	.-30     	; 0x1f8e <verifySpace>

00001fac <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    1fac:	fc 01       	movw	r30, r24
    1fae:	0a 01       	movw	r0, r20
    1fb0:	67 bf       	out	0x37, r22	; 55
    1fb2:	e8 95       	spm
    1fb4:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    1fb6:	07 b6       	in	r0, 0x37	; 55
    1fb8:	00 fc       	sbrc	r0, 0
    1fba:	fd cf       	rjmp	.-6      	; 0x1fb6 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    1fbc:	66 70       	andi	r22, 0x06	; 6
    1fbe:	29 f0       	breq	.+10     	; 0x1fca <do_spm+0x1e>
    1fc0:	45 2b       	or	r20, r21
    1fc2:	19 f4       	brne	.+6      	; 0x1fca <do_spm+0x1e>
      // Reenable read access to flash
      __boot_rww_enable_short();
    1fc4:	81 e1       	ldi	r24, 0x11	; 17
    1fc6:	87 bf       	out	0x37, r24	; 55
    1fc8:	e8 95       	spm
    1fca:	08 95       	ret
