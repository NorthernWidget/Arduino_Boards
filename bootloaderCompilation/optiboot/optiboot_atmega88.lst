
optiboot_atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00001e00  00001e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  00000250  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000cd8  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f58  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <main>
    1e02:	dc c0       	rjmp	.+440    	; 0x1fbc <do_spm>

00001e04 <main>:
    1e04:	11 24       	eor	r1, r1
    1e06:	84 b7       	in	r24, 0x34	; 52
    1e08:	88 23       	and	r24, r24
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <main+0x20>
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	9a 70       	andi	r25, 0x0A	; 10
    1e10:	92 30       	cpi	r25, 0x02	; 2
    1e12:	41 f0       	breq	.+16     	; 0x1e24 <main+0x20>
    1e14:	81 ff       	sbrs	r24, 1
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <main+0x18>
    1e18:	97 ef       	ldi	r25, 0xF7	; 247
    1e1a:	94 bf       	out	0x34, r25	; 52
    1e1c:	28 2e       	mov	r2, r24
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	b8 d0       	rcall	.+368    	; 0x1f92 <watchdogConfig>
    1e22:	ee c0       	rjmp	.+476    	; 0x2000 <__TEXT_REGION_LENGTH__>
    1e24:	85 e0       	ldi	r24, 0x05	; 5
    1e26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
    1e30:	88 e1       	ldi	r24, 0x18	; 24
    1e32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
    1e36:	86 e0       	ldi	r24, 0x06	; 6
    1e38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
    1e3c:	80 e1       	ldi	r24, 0x10	; 16
    1e3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
    1e42:	8e e0       	ldi	r24, 0x0E	; 14
    1e44:	a6 d0       	rcall	.+332    	; 0x1f92 <watchdogConfig>
    1e46:	25 9a       	sbi	0x04, 5	; 4
    1e48:	86 e0       	ldi	r24, 0x06	; 6
    1e4a:	20 e3       	ldi	r18, 0x30	; 48
    1e4c:	3c ef       	ldi	r19, 0xFC	; 252
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1e54:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
    1e58:	96 bb       	out	0x16, r25	; 22
    1e5a:	b0 9b       	sbis	0x16, 0	; 22
    1e5c:	fe cf       	rjmp	.-4      	; 0x1e5a <main+0x56>
    1e5e:	1d 9a       	sbi	0x03, 5	; 3
    1e60:	a8 95       	wdr
    1e62:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
    1e66:	47 fd       	sbrc	r20, 7
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <main+0x6a>
    1e6a:	81 50       	subi	r24, 0x01	; 1
    1e6c:	89 f7       	brne	.-30     	; 0x1e50 <main+0x4c>
    1e6e:	ee 24       	eor	r14, r14
    1e70:	e3 94       	inc	r14
    1e72:	95 e0       	ldi	r25, 0x05	; 5
    1e74:	d9 2e       	mov	r13, r25
    1e76:	21 e1       	ldi	r18, 0x11	; 17
    1e78:	c2 2e       	mov	r12, r18
    1e7a:	7f d0       	rcall	.+254    	; 0x1f7a <getch>
    1e7c:	81 34       	cpi	r24, 0x41	; 65
    1e7e:	61 f4       	brne	.+24     	; 0x1e98 <main+0x94>
    1e80:	7c d0       	rcall	.+248    	; 0x1f7a <getch>
    1e82:	18 2f       	mov	r17, r24
    1e84:	8c d0       	rcall	.+280    	; 0x1f9e <verifySpace>
    1e86:	12 38       	cpi	r17, 0x82	; 130
    1e88:	e9 f0       	breq	.+58     	; 0x1ec4 <main+0xc0>
    1e8a:	11 38       	cpi	r17, 0x81	; 129
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <main+0x8e>
    1e8e:	88 e0       	ldi	r24, 0x08	; 8
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <main+0x90>
    1e92:	83 e0       	ldi	r24, 0x03	; 3
    1e94:	6b d0       	rcall	.+214    	; 0x1f6c <putch>
    1e96:	67 c0       	rjmp	.+206    	; 0x1f66 <main+0x162>
    1e98:	82 34       	cpi	r24, 0x42	; 66
    1e9a:	11 f4       	brne	.+4      	; 0x1ea0 <main+0x9c>
    1e9c:	84 e1       	ldi	r24, 0x14	; 20
    1e9e:	03 c0       	rjmp	.+6      	; 0x1ea6 <main+0xa2>
    1ea0:	85 34       	cpi	r24, 0x45	; 69
    1ea2:	19 f4       	brne	.+6      	; 0x1eaa <main+0xa6>
    1ea4:	85 e0       	ldi	r24, 0x05	; 5
    1ea6:	83 d0       	rcall	.+262    	; 0x1fae <getNch>
    1ea8:	5e c0       	rjmp	.+188    	; 0x1f66 <main+0x162>
    1eaa:	85 35       	cpi	r24, 0x55	; 85
    1eac:	39 f4       	brne	.+14     	; 0x1ebc <main+0xb8>
    1eae:	65 d0       	rcall	.+202    	; 0x1f7a <getch>
    1eb0:	c8 2f       	mov	r28, r24
    1eb2:	63 d0       	rcall	.+198    	; 0x1f7a <getch>
    1eb4:	d8 2f       	mov	r29, r24
    1eb6:	cc 0f       	add	r28, r28
    1eb8:	dd 1f       	adc	r29, r29
    1eba:	54 c0       	rjmp	.+168    	; 0x1f64 <main+0x160>
    1ebc:	86 35       	cpi	r24, 0x56	; 86
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <main+0xc4>
    1ec0:	84 e0       	ldi	r24, 0x04	; 4
    1ec2:	75 d0       	rcall	.+234    	; 0x1fae <getNch>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	e6 cf       	rjmp	.-52     	; 0x1e94 <main+0x90>
    1ec8:	84 36       	cpi	r24, 0x64	; 100
    1eca:	09 f0       	breq	.+2      	; 0x1ece <main+0xca>
    1ecc:	2e c0       	rjmp	.+92     	; 0x1f2a <main+0x126>
    1ece:	55 d0       	rcall	.+170    	; 0x1f7a <getch>
    1ed0:	54 d0       	rcall	.+168    	; 0x1f7a <getch>
    1ed2:	f8 2e       	mov	r15, r24
    1ed4:	52 d0       	rcall	.+164    	; 0x1f7a <getch>
    1ed6:	b8 2e       	mov	r11, r24
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	11 e0       	ldi	r17, 0x01	; 1
    1edc:	4e d0       	rcall	.+156    	; 0x1f7a <getch>
    1ede:	f8 01       	movw	r30, r16
    1ee0:	81 93       	st	Z+, r24
    1ee2:	8f 01       	movw	r16, r30
    1ee4:	fe 12       	cpse	r15, r30
    1ee6:	fa cf       	rjmp	.-12     	; 0x1edc <main+0xd8>
    1ee8:	5a d0       	rcall	.+180    	; 0x1f9e <verifySpace>
    1eea:	f5 e4       	ldi	r31, 0x45	; 69
    1eec:	bf 12       	cpse	r11, r31
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <main+0xee>
    1ef0:	ff cf       	rjmp	.-2      	; 0x1ef0 <main+0xec>
    1ef2:	83 e0       	ldi	r24, 0x03	; 3
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	87 bf       	out	0x37, r24	; 55
    1ef8:	e8 95       	spm
    1efa:	07 b6       	in	r0, 0x37	; 55
    1efc:	00 fc       	sbrc	r0, 0
    1efe:	fd cf       	rjmp	.-6      	; 0x1efa <main+0xf6>
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b1 e0       	ldi	r27, 0x01	; 1
    1f04:	fe 01       	movw	r30, r28
    1f06:	8d 91       	ld	r24, X+
    1f08:	9d 91       	ld	r25, X+
    1f0a:	0c 01       	movw	r0, r24
    1f0c:	e7 be       	out	0x37, r14	; 55
    1f0e:	e8 95       	spm
    1f10:	11 24       	eor	r1, r1
    1f12:	32 96       	adiw	r30, 0x02	; 2
    1f14:	fa 12       	cpse	r15, r26
    1f16:	f7 cf       	rjmp	.-18     	; 0x1f06 <main+0x102>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	d7 be       	out	0x37, r13	; 55
    1f1c:	e8 95       	spm
    1f1e:	07 b6       	in	r0, 0x37	; 55
    1f20:	00 fc       	sbrc	r0, 0
    1f22:	fd cf       	rjmp	.-6      	; 0x1f1e <main+0x11a>
    1f24:	c7 be       	out	0x37, r12	; 55
    1f26:	e8 95       	spm
    1f28:	1e c0       	rjmp	.+60     	; 0x1f66 <main+0x162>
    1f2a:	84 37       	cpi	r24, 0x74	; 116
    1f2c:	71 f4       	brne	.+28     	; 0x1f4a <main+0x146>
    1f2e:	25 d0       	rcall	.+74     	; 0x1f7a <getch>
    1f30:	24 d0       	rcall	.+72     	; 0x1f7a <getch>
    1f32:	f8 2e       	mov	r15, r24
    1f34:	22 d0       	rcall	.+68     	; 0x1f7a <getch>
    1f36:	33 d0       	rcall	.+102    	; 0x1f9e <verifySpace>
    1f38:	8e 01       	movw	r16, r28
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	85 91       	lpm	r24, Z+
    1f3e:	8f 01       	movw	r16, r30
    1f40:	15 d0       	rcall	.+42     	; 0x1f6c <putch>
    1f42:	fa 94       	dec	r15
    1f44:	f1 10       	cpse	r15, r1
    1f46:	f9 cf       	rjmp	.-14     	; 0x1f3a <main+0x136>
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <main+0x162>
    1f4a:	85 37       	cpi	r24, 0x75	; 117
    1f4c:	39 f4       	brne	.+14     	; 0x1f5c <main+0x158>
    1f4e:	27 d0       	rcall	.+78     	; 0x1f9e <verifySpace>
    1f50:	8e e1       	ldi	r24, 0x1E	; 30
    1f52:	0c d0       	rcall	.+24     	; 0x1f6c <putch>
    1f54:	83 e9       	ldi	r24, 0x93	; 147
    1f56:	0a d0       	rcall	.+20     	; 0x1f6c <putch>
    1f58:	8a e0       	ldi	r24, 0x0A	; 10
    1f5a:	9c cf       	rjmp	.-200    	; 0x1e94 <main+0x90>
    1f5c:	81 35       	cpi	r24, 0x51	; 81
    1f5e:	11 f4       	brne	.+4      	; 0x1f64 <main+0x160>
    1f60:	88 e0       	ldi	r24, 0x08	; 8
    1f62:	17 d0       	rcall	.+46     	; 0x1f92 <watchdogConfig>
    1f64:	1c d0       	rcall	.+56     	; 0x1f9e <verifySpace>
    1f66:	80 e1       	ldi	r24, 0x10	; 16
    1f68:	01 d0       	rcall	.+2      	; 0x1f6c <putch>
    1f6a:	87 cf       	rjmp	.-242    	; 0x1e7a <main+0x76>

00001f6c <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  #ifndef LIN_UART
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    1f6c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
    1f70:	95 ff       	sbrs	r25, 5
    1f72:	fc cf       	rjmp	.-8      	; 0x1f6c <putch>
  #else
    while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
  #endif

  UART_UDR = ch;
    1f74:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
    1f78:	08 95       	ret

00001f7a <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    1f7a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
    1f7e:	87 ff       	sbrs	r24, 7
    1f80:	fc cf       	rjmp	.-8      	; 0x1f7a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f82:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
    1f86:	84 fd       	sbrc	r24, 4
    1f88:	01 c0       	rjmp	.+2      	; 0x1f8c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f8a:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    1f8c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1f90:	08 95       	ret

00001f92 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f92:	e0 e6       	ldi	r30, 0x60	; 96
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	98 e1       	ldi	r25, 0x18	; 24
    1f98:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif 

#ifdef WDTCSR
  WDTCSR = x;
    1f9a:	80 83       	st	Z, r24
    1f9c:	08 95       	ret

00001f9e <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f9e:	ed df       	rcall	.-38     	; 0x1f7a <getch>
    1fa0:	80 32       	cpi	r24, 0x20	; 32
    1fa2:	19 f0       	breq	.+6      	; 0x1faa <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fa4:	88 e0       	ldi	r24, 0x08	; 8
    1fa6:	f5 df       	rcall	.-22     	; 0x1f92 <watchdogConfig>
    1fa8:	ff cf       	rjmp	.-2      	; 0x1fa8 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1faa:	84 e1       	ldi	r24, 0x14	; 20
    1fac:	df cf       	rjmp	.-66     	; 0x1f6c <putch>

00001fae <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fae:	cf 93       	push	r28
    1fb0:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fb2:	e3 df       	rcall	.-58     	; 0x1f7a <getch>
    1fb4:	c1 50       	subi	r28, 0x01	; 1
    1fb6:	e9 f7       	brne	.-6      	; 0x1fb2 <getNch+0x4>
  verifySpace();
}
    1fb8:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fba:	f1 cf       	rjmp	.-30     	; 0x1f9e <verifySpace>

00001fbc <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	0a 01       	movw	r0, r20
    1fc0:	67 bf       	out	0x37, r22	; 55
    1fc2:	e8 95       	spm
    1fc4:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    1fc6:	07 b6       	in	r0, 0x37	; 55
    1fc8:	00 fc       	sbrc	r0, 0
    1fca:	fd cf       	rjmp	.-6      	; 0x1fc6 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    1fcc:	66 70       	andi	r22, 0x06	; 6
    1fce:	29 f0       	breq	.+10     	; 0x1fda <do_spm+0x1e>
    1fd0:	45 2b       	or	r20, r21
    1fd2:	19 f4       	brne	.+6      	; 0x1fda <do_spm+0x1e>
      // Reenable read access to flash
      __boot_rww_enable_short();
    1fd4:	81 e1       	ldi	r24, 0x11	; 17
    1fd6:	87 bf       	out	0x37, r24	; 55
    1fd8:	e8 95       	spm
    1fda:	08 95       	ret
