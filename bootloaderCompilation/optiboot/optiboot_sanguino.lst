
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000ff01  00000395  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000301  0000fc00  0000fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0000fffe  0000fffe  00000395  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000da4  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d2  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000220e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0000fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    fc00:	01 c0       	rjmp	.+2      	; 0xfc04 <main>
    fc02:	0b c1       	rjmp	.+534    	; 0xfe1a <do_spm>

0000fc04 <main>:
    fc04:	11 24       	eor	r1, r1
    fc06:	84 b7       	in	r24, 0x34	; 52
    fc08:	88 23       	and	r24, r24
    fc0a:	61 f0       	breq	.+24     	; 0xfc24 <main+0x20>
    fc0c:	98 2f       	mov	r25, r24
    fc0e:	9a 70       	andi	r25, 0x0A	; 10
    fc10:	92 30       	cpi	r25, 0x02	; 2
    fc12:	41 f0       	breq	.+16     	; 0xfc24 <main+0x20>
    fc14:	81 ff       	sbrs	r24, 1
    fc16:	02 c0       	rjmp	.+4      	; 0xfc1c <main+0x18>
    fc18:	97 ef       	ldi	r25, 0xF7	; 247
    fc1a:	94 bf       	out	0x34, r25	; 52
    fc1c:	28 2e       	mov	r2, r24
    fc1e:	80 e0       	ldi	r24, 0x00	; 0
    fc20:	e7 d0       	rcall	.+462    	; 0xfdf0 <watchdogConfig>
    fc22:	ee c1       	rjmp	.+988    	; 0x10000 <__EEPROM_REGION_LENGTH__>
    fc24:	85 e0       	ldi	r24, 0x05	; 5
    fc26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    fc2a:	82 e0       	ldi	r24, 0x02	; 2
    fc2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fc30:	88 e1       	ldi	r24, 0x18	; 24
    fc32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    fc36:	86 e0       	ldi	r24, 0x06	; 6
    fc38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    fc3c:	80 e1       	ldi	r24, 0x10	; 16
    fc3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    fc42:	8e e0       	ldi	r24, 0x0E	; 14
    fc44:	d5 d0       	rcall	.+426    	; 0xfdf0 <watchdogConfig>
    fc46:	20 9a       	sbi	0x04, 0	; 4
    fc48:	86 e0       	ldi	r24, 0x06	; 6
    fc4a:	20 e3       	ldi	r18, 0x30	; 48
    fc4c:	3c ef       	ldi	r19, 0xFC	; 252
    fc4e:	91 e0       	ldi	r25, 0x01	; 1
    fc50:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    fc54:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    fc58:	96 bb       	out	0x16, r25	; 22
    fc5a:	b0 9b       	sbis	0x16, 0	; 22
    fc5c:	fe cf       	rjmp	.-4      	; 0xfc5a <main+0x56>
    fc5e:	18 9a       	sbi	0x03, 0	; 3
    fc60:	a8 95       	wdr
    fc62:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fc66:	47 fd       	sbrc	r20, 7
    fc68:	02 c0       	rjmp	.+4      	; 0xfc6e <main+0x6a>
    fc6a:	81 50       	subi	r24, 0x01	; 1
    fc6c:	89 f7       	brne	.-30     	; 0xfc50 <main+0x4c>
    fc6e:	ff 24       	eor	r15, r15
    fc70:	f3 94       	inc	r15
    fc72:	55 e0       	ldi	r21, 0x05	; 5
    fc74:	e5 2e       	mov	r14, r21
    fc76:	61 e1       	ldi	r22, 0x11	; 17
    fc78:	d6 2e       	mov	r13, r22
    fc7a:	ae d0       	rcall	.+348    	; 0xfdd8 <getch>
    fc7c:	81 34       	cpi	r24, 0x41	; 65
    fc7e:	61 f4       	brne	.+24     	; 0xfc98 <main+0x94>
    fc80:	ab d0       	rcall	.+342    	; 0xfdd8 <getch>
    fc82:	c8 2f       	mov	r28, r24
    fc84:	bb d0       	rcall	.+374    	; 0xfdfc <verifySpace>
    fc86:	c2 38       	cpi	r28, 0x82	; 130
    fc88:	e9 f0       	breq	.+58     	; 0xfcc4 <main+0xc0>
    fc8a:	c1 38       	cpi	r28, 0x81	; 129
    fc8c:	11 f4       	brne	.+4      	; 0xfc92 <main+0x8e>
    fc8e:	88 e0       	ldi	r24, 0x08	; 8
    fc90:	01 c0       	rjmp	.+2      	; 0xfc94 <main+0x90>
    fc92:	83 e0       	ldi	r24, 0x03	; 3
    fc94:	9a d0       	rcall	.+308    	; 0xfdca <putch>
    fc96:	96 c0       	rjmp	.+300    	; 0xfdc4 <main+0x1c0>
    fc98:	82 34       	cpi	r24, 0x42	; 66
    fc9a:	11 f4       	brne	.+4      	; 0xfca0 <main+0x9c>
    fc9c:	84 e1       	ldi	r24, 0x14	; 20
    fc9e:	03 c0       	rjmp	.+6      	; 0xfca6 <main+0xa2>
    fca0:	85 34       	cpi	r24, 0x45	; 69
    fca2:	19 f4       	brne	.+6      	; 0xfcaa <main+0xa6>
    fca4:	85 e0       	ldi	r24, 0x05	; 5
    fca6:	b2 d0       	rcall	.+356    	; 0xfe0c <getNch>
    fca8:	8d c0       	rjmp	.+282    	; 0xfdc4 <main+0x1c0>
    fcaa:	85 35       	cpi	r24, 0x55	; 85
    fcac:	39 f4       	brne	.+14     	; 0xfcbc <main+0xb8>
    fcae:	94 d0       	rcall	.+296    	; 0xfdd8 <getch>
    fcb0:	08 2f       	mov	r16, r24
    fcb2:	92 d0       	rcall	.+292    	; 0xfdd8 <getch>
    fcb4:	18 2f       	mov	r17, r24
    fcb6:	00 0f       	add	r16, r16
    fcb8:	11 1f       	adc	r17, r17
    fcba:	83 c0       	rjmp	.+262    	; 0xfdc2 <main+0x1be>
    fcbc:	86 35       	cpi	r24, 0x56	; 86
    fcbe:	21 f4       	brne	.+8      	; 0xfcc8 <main+0xc4>
    fcc0:	84 e0       	ldi	r24, 0x04	; 4
    fcc2:	a4 d0       	rcall	.+328    	; 0xfe0c <getNch>
    fcc4:	80 e0       	ldi	r24, 0x00	; 0
    fcc6:	e6 cf       	rjmp	.-52     	; 0xfc94 <main+0x90>
    fcc8:	84 36       	cpi	r24, 0x64	; 100
    fcca:	09 f0       	breq	.+2      	; 0xfcce <main+0xca>
    fccc:	48 c0       	rjmp	.+144    	; 0xfd5e <main+0x15a>
    fcce:	84 d0       	rcall	.+264    	; 0xfdd8 <getch>
    fcd0:	c8 2f       	mov	r28, r24
    fcd2:	d0 e0       	ldi	r29, 0x00	; 0
    fcd4:	dc 2f       	mov	r29, r28
    fcd6:	cc 27       	eor	r28, r28
    fcd8:	7f d0       	rcall	.+254    	; 0xfdd8 <getch>
    fcda:	c8 2b       	or	r28, r24
    fcdc:	7d d0       	rcall	.+250    	; 0xfdd8 <getch>
    fcde:	c8 2e       	mov	r12, r24
    fce0:	5e 01       	movw	r10, r28
    fce2:	81 2c       	mov	r8, r1
    fce4:	99 24       	eor	r9, r9
    fce6:	93 94       	inc	r9
    fce8:	77 d0       	rcall	.+238    	; 0xfdd8 <getch>
    fcea:	f4 01       	movw	r30, r8
    fcec:	81 93       	st	Z+, r24
    fcee:	4f 01       	movw	r8, r30
    fcf0:	f1 e0       	ldi	r31, 0x01	; 1
    fcf2:	af 1a       	sub	r10, r31
    fcf4:	b1 08       	sbc	r11, r1
    fcf6:	c1 f7       	brne	.-16     	; 0xfce8 <main+0xe4>
    fcf8:	81 d0       	rcall	.+258    	; 0xfdfc <verifySpace>
    fcfa:	85 e4       	ldi	r24, 0x45	; 69
    fcfc:	c8 12       	cpse	r12, r24
    fcfe:	12 c0       	rjmp	.+36     	; 0xfd24 <main+0x120>
    fd00:	d3 95       	inc	r29
    fd02:	48 01       	movw	r8, r16
    fd04:	a1 2c       	mov	r10, r1
    fd06:	bb 24       	eor	r11, r11
    fd08:	b3 94       	inc	r11
    fd0a:	ac 16       	cp	r10, r28
    fd0c:	bd 06       	cpc	r11, r29
    fd0e:	09 f4       	brne	.+2      	; 0xfd12 <main+0x10e>
    fd10:	59 c0       	rjmp	.+178    	; 0xfdc4 <main+0x1c0>
    fd12:	f5 01       	movw	r30, r10
    fd14:	61 91       	ld	r22, Z+
    fd16:	5f 01       	movw	r10, r30
    fd18:	c4 01       	movw	r24, r8
    fd1a:	97 d0       	rcall	.+302    	; 0xfe4a <eeprom_write_byte>
    fd1c:	ff ef       	ldi	r31, 0xFF	; 255
    fd1e:	8f 1a       	sub	r8, r31
    fd20:	9f 0a       	sbc	r9, r31
    fd22:	f3 cf       	rjmp	.-26     	; 0xfd0a <main+0x106>
    fd24:	83 e0       	ldi	r24, 0x03	; 3
    fd26:	f8 01       	movw	r30, r16
    fd28:	87 bf       	out	0x37, r24	; 55
    fd2a:	e8 95       	spm
    fd2c:	07 b6       	in	r0, 0x37	; 55
    fd2e:	00 fc       	sbrc	r0, 0
    fd30:	fd cf       	rjmp	.-6      	; 0xfd2c <main+0x128>
    fd32:	a0 e0       	ldi	r26, 0x00	; 0
    fd34:	b1 e0       	ldi	r27, 0x01	; 1
    fd36:	f8 01       	movw	r30, r16
    fd38:	8d 91       	ld	r24, X+
    fd3a:	9d 91       	ld	r25, X+
    fd3c:	0c 01       	movw	r0, r24
    fd3e:	f7 be       	out	0x37, r15	; 55
    fd40:	e8 95       	spm
    fd42:	11 24       	eor	r1, r1
    fd44:	22 97       	sbiw	r28, 0x02	; 2
    fd46:	32 96       	adiw	r30, 0x02	; 2
    fd48:	20 97       	sbiw	r28, 0x00	; 0
    fd4a:	b1 f7       	brne	.-20     	; 0xfd38 <main+0x134>
    fd4c:	f8 01       	movw	r30, r16
    fd4e:	e7 be       	out	0x37, r14	; 55
    fd50:	e8 95       	spm
    fd52:	07 b6       	in	r0, 0x37	; 55
    fd54:	00 fc       	sbrc	r0, 0
    fd56:	fd cf       	rjmp	.-6      	; 0xfd52 <main+0x14e>
    fd58:	d7 be       	out	0x37, r13	; 55
    fd5a:	e8 95       	spm
    fd5c:	33 c0       	rjmp	.+102    	; 0xfdc4 <main+0x1c0>
    fd5e:	84 37       	cpi	r24, 0x74	; 116
    fd60:	19 f5       	brne	.+70     	; 0xfda8 <main+0x1a4>
    fd62:	3a d0       	rcall	.+116    	; 0xfdd8 <getch>
    fd64:	c8 2f       	mov	r28, r24
    fd66:	d0 e0       	ldi	r29, 0x00	; 0
    fd68:	dc 2f       	mov	r29, r28
    fd6a:	cc 27       	eor	r28, r28
    fd6c:	35 d0       	rcall	.+106    	; 0xfdd8 <getch>
    fd6e:	5e 01       	movw	r10, r28
    fd70:	a8 2a       	or	r10, r24
    fd72:	32 d0       	rcall	.+100    	; 0xfdd8 <getch>
    fd74:	98 2e       	mov	r9, r24
    fd76:	42 d0       	rcall	.+132    	; 0xfdfc <verifySpace>
    fd78:	e8 01       	movw	r28, r16
    fd7a:	f5 e4       	ldi	r31, 0x45	; 69
    fd7c:	9f 12       	cpse	r9, r31
    fd7e:	0b c0       	rjmp	.+22     	; 0xfd96 <main+0x192>
    fd80:	ce 01       	movw	r24, r28
    fd82:	5b d0       	rcall	.+182    	; 0xfe3a <eeprom_read_byte>
    fd84:	22 d0       	rcall	.+68     	; 0xfdca <putch>
    fd86:	81 e0       	ldi	r24, 0x01	; 1
    fd88:	a8 1a       	sub	r10, r24
    fd8a:	b1 08       	sbc	r11, r1
    fd8c:	21 96       	adiw	r28, 0x01	; 1
    fd8e:	a1 14       	cp	r10, r1
    fd90:	b1 04       	cpc	r11, r1
    fd92:	b1 f7       	brne	.-20     	; 0xfd80 <main+0x17c>
    fd94:	17 c0       	rjmp	.+46     	; 0xfdc4 <main+0x1c0>
    fd96:	fe 01       	movw	r30, r28
    fd98:	85 91       	lpm	r24, Z+
    fd9a:	ef 01       	movw	r28, r30
    fd9c:	16 d0       	rcall	.+44     	; 0xfdca <putch>
    fd9e:	e1 e0       	ldi	r30, 0x01	; 1
    fda0:	ae 1a       	sub	r10, r30
    fda2:	b1 08       	sbc	r11, r1
    fda4:	c1 f7       	brne	.-16     	; 0xfd96 <main+0x192>
    fda6:	0e c0       	rjmp	.+28     	; 0xfdc4 <main+0x1c0>
    fda8:	85 37       	cpi	r24, 0x75	; 117
    fdaa:	39 f4       	brne	.+14     	; 0xfdba <main+0x1b6>
    fdac:	27 d0       	rcall	.+78     	; 0xfdfc <verifySpace>
    fdae:	8e e1       	ldi	r24, 0x1E	; 30
    fdb0:	0c d0       	rcall	.+24     	; 0xfdca <putch>
    fdb2:	86 e9       	ldi	r24, 0x96	; 150
    fdb4:	0a d0       	rcall	.+20     	; 0xfdca <putch>
    fdb6:	8a e0       	ldi	r24, 0x0A	; 10
    fdb8:	6d cf       	rjmp	.-294    	; 0xfc94 <main+0x90>
    fdba:	81 35       	cpi	r24, 0x51	; 81
    fdbc:	11 f4       	brne	.+4      	; 0xfdc2 <main+0x1be>
    fdbe:	88 e0       	ldi	r24, 0x08	; 8
    fdc0:	17 d0       	rcall	.+46     	; 0xfdf0 <watchdogConfig>
    fdc2:	1c d0       	rcall	.+56     	; 0xfdfc <verifySpace>
    fdc4:	80 e1       	ldi	r24, 0x10	; 16
    fdc6:	01 d0       	rcall	.+2      	; 0xfdca <putch>
    fdc8:	58 cf       	rjmp	.-336    	; 0xfc7a <main+0x76>

0000fdca <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  #ifndef LIN_UART
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    fdca:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fdce:	95 ff       	sbrs	r25, 5
    fdd0:	fc cf       	rjmp	.-8      	; 0xfdca <putch>
  #else
    while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
  #endif

  UART_UDR = ch;
    fdd2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    fdd6:	08 95       	ret

0000fdd8 <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    fdd8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fddc:	87 ff       	sbrs	r24, 7
    fdde:	fc cf       	rjmp	.-8      	; 0xfdd8 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    fde0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fde4:	84 fd       	sbrc	r24, 4
    fde6:	01 c0       	rjmp	.+2      	; 0xfdea <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fde8:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    fdea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fdee:	08 95       	ret

0000fdf0 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdf0:	e0 e6       	ldi	r30, 0x60	; 96
    fdf2:	f0 e0       	ldi	r31, 0x00	; 0
    fdf4:	98 e1       	ldi	r25, 0x18	; 24
    fdf6:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif 

#ifdef WDTCSR
  WDTCSR = x;
    fdf8:	80 83       	st	Z, r24
    fdfa:	08 95       	ret

0000fdfc <verifySpace>:
void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
    fdfc:	ed df       	rcall	.-38     	; 0xfdd8 <getch>
    fdfe:	80 32       	cpi	r24, 0x20	; 32
    fe00:	19 f0       	breq	.+6      	; 0xfe08 <verifySpace+0xc>
    fe02:	88 e0       	ldi	r24, 0x08	; 8
    fe04:	f5 df       	rcall	.-22     	; 0xfdf0 <watchdogConfig>
    fe06:	ff cf       	rjmp	.-2      	; 0xfe06 <verifySpace+0xa>
    fe08:	84 e1       	ldi	r24, 0x14	; 20
    fe0a:	df cf       	rjmp	.-66     	; 0xfdca <putch>

0000fe0c <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fe0c:	cf 93       	push	r28
    fe0e:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    fe10:	e3 df       	rcall	.-58     	; 0xfdd8 <getch>
    fe12:	c1 50       	subi	r28, 0x01	; 1
    fe14:	e9 f7       	brne	.-6      	; 0xfe10 <getNch+0x4>
  verifySpace();
}
    fe16:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    fe18:	f1 cf       	rjmp	.-30     	; 0xfdfc <verifySpace>

0000fe1a <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    fe1a:	fc 01       	movw	r30, r24
    fe1c:	0a 01       	movw	r0, r20
    fe1e:	67 bf       	out	0x37, r22	; 55
    fe20:	e8 95       	spm
    fe22:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    fe24:	07 b6       	in	r0, 0x37	; 55
    fe26:	00 fc       	sbrc	r0, 0
    fe28:	fd cf       	rjmp	.-6      	; 0xfe24 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    fe2a:	66 70       	andi	r22, 0x06	; 6
    fe2c:	29 f0       	breq	.+10     	; 0xfe38 <do_spm+0x1e>
    fe2e:	45 2b       	or	r20, r21
    fe30:	19 f4       	brne	.+6      	; 0xfe38 <do_spm+0x1e>
      // Reenable read access to flash
      __boot_rww_enable_short();
    fe32:	81 e1       	ldi	r24, 0x11	; 17
    fe34:	87 bf       	out	0x37, r24	; 55
    fe36:	e8 95       	spm
    fe38:	08 95       	ret

0000fe3a <eeprom_read_byte>:
    fe3a:	f9 99       	sbic	0x1f, 1	; 31
    fe3c:	fe cf       	rjmp	.-4      	; 0xfe3a <eeprom_read_byte>
    fe3e:	92 bd       	out	0x22, r25	; 34
    fe40:	81 bd       	out	0x21, r24	; 33
    fe42:	f8 9a       	sbi	0x1f, 0	; 31
    fe44:	99 27       	eor	r25, r25
    fe46:	80 b5       	in	r24, 0x20	; 32
    fe48:	08 95       	ret

0000fe4a <eeprom_write_byte>:
    fe4a:	26 2f       	mov	r18, r22

0000fe4c <eeprom_write_r18>:
    fe4c:	f9 99       	sbic	0x1f, 1	; 31
    fe4e:	fe cf       	rjmp	.-4      	; 0xfe4c <eeprom_write_r18>
    fe50:	1f ba       	out	0x1f, r1	; 31
    fe52:	92 bd       	out	0x22, r25	; 34
    fe54:	81 bd       	out	0x21, r24	; 33
    fe56:	20 bd       	out	0x20, r18	; 32
    fe58:	0f b6       	in	r0, 0x3f	; 63
    fe5a:	f8 94       	cli
    fe5c:	fa 9a       	sbi	0x1f, 2	; 31
    fe5e:	f9 9a       	sbi	0x1f, 1	; 31
    fe60:	0f be       	out	0x3f, r0	; 63
    fe62:	01 96       	adiw	r24, 0x01	; 1
    fe64:	08 95       	ret

0000fe66 <f_version>:
    fe66:	56 65 72 73 69 6f 6e 3d 38 2e 30 00                 Version=8.0.

0000fe72 <fOPTIBOOT_CUSTOMVER>:
    fe72:	4f 50 54 49 42 4f 4f 54 5f 43 55 53 54 4f 4d 56     OPTIBOOT_CUSTOMV
    fe82:	45 52 3d 30 00                                      ER=0.

0000fe87 <f_device>:
    fe87:	44 65 76 69 63 65 3d 61 74 6d 65 67 61 36 34 34     Device=atmega644
    fe97:	70 00                                               p.

0000fe99 <fF_CPU>:
    fe99:	46 5f 43 50 55 3d 31 36 30 30 30 30 30 30 4c 00     F_CPU=16000000L.

0000fea9 <fBIGBOOT>:
    fea9:	42 49 47 42 4f 4f 54 3d 31 00                       BIGBOOT=1.

0000feb3 <f_date>:
    feb3:	42 75 69 6c 74 3a 41 75 67 20 20 36 20 32 30 31     Built:Aug  6 201
    fec3:	39 3a 30 39 3a 30 32 3a 30 39 00                    9:09:02:09.

0000fece <fUART>:
    fece:	55 41 52 54 3d 30 00                                UART=0.

0000fed5 <fBAUD_RATE>:
    fed5:	42 41 55 44 5f 52 41 54 45 3d 31 31 35 32 30 30     BAUD_RATE=115200
	...

0000fee6 <f_LED>:
    fee6:	4c 45 44 3d 42 30 00                                LED=B0.

0000feed <fLED_START_FLASHES>:
    feed:	4c 45 44 5f 53 54 41 52 54 5f 46 4c 41 53 48 45     LED_START_FLASHE
    fefd:	53 3d 33 00                                         S=3.
